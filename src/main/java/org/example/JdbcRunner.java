package org.example;

import org.example.util.ConnectionManager;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

public class JdbcRunner {


    public static void main(String[] args) throws SQLException {

//      String str = "2 OR 1 = 1; DROP TABLE info"; // SQL-Injection
//        Long l = 2L;
//        var result = getTicketsByFlightId(l);
//        System.out.println(result);
        List<Long> result = getFlightsBetween(LocalDate.of(2020, 10, 1).atStartOfDay(), LocalDateTime.now());
        System.out.println(result);

    }

    private static List<Long> getFlightsBetween(LocalDateTime start, LocalDateTime end) throws SQLException {
        String sql = """
                SELECT id
                FROM flight
                WHERE departure_date BETWEEN ? AND ?
                """;
        List<Long> result = new ArrayList<>();
        try (Connection connection = ConnectionManager.open();
             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {

            System.out.println(preparedStatement);
            preparedStatement.setTimestamp(1, Timestamp.valueOf(start));
            System.out.println(preparedStatement);
            preparedStatement.setTimestamp(2, Timestamp.valueOf(end));
            System.out.println(preparedStatement);
            ResultSet resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
                result.add(resultSet.getLong("id"));

            }
        }
        return result;

    }

    private static List<Long> getTicketsByFlightId(Long flightId) throws SQLException {
        String sql = """
                SELECT id
                FROM ticket
                WHERE flight_id = ?              
                """.formatted(flightId);
        List<Long> result = new ArrayList<>();
        try (var connection = ConnectionManager.open();
//           var resultSet = statement.executeQuery(sql);
             var preparedStatement = connection.prepareStatement(sql)) {
            preparedStatement.setLong(1, flightId);
            var resultSet = preparedStatement.executeQuery();
            while (resultSet.next()) {
//              result.add(resultSet.getLong("id"));
                result.add(resultSet.getObject("id", Long.class)); // NULL safe

            }

        }
        return result;
    }
}


//        Class<Driver> driverClass = Driver.class;
//        String sql = """
//                INSERT INTO info (data)
//                VALUES
//                ('autogenerated')
//                """;
//
//        try (Connection connection = ConnectionManager.open();
//             Statement statement = connection.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_UPDATABLE)) {
//            System.out.println(connection.getSchema());
//            System.out.println(connection.getTransactionIsolation());
//          boolean executeResult = statement.execute(sql); // Лучше использовать только с DDL операциями.
//          int executeResult = statement.executeUpdate(sql); // Не может работать с SELECT командами
//          ResultSet executeResult = statement.executeQuery(sql); // В данном случае возвращает ResultSet, ResultSet закрывается автоматически, когда закрывается statement, который его вызвал.
//            int executeResult = statement.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
//            ResultSet generatedKeys = statement.getGeneratedKeys();
//            if(generatedKeys.next()) {
//                int generatedId = generatedKeys.getInt("id");
//                System.out.println(generatedId);
//            }


//            while (executeResult.next()) { // Работает с statement.executeQuery(sql)
//                System.out.println(executeResult.getLong("id"));
//                System.out.println(executeResult.getString("passenger_no"));
//                System.out.println(executeResult.getBigDecimal("cost"));
//                System.out.println("----------");
//                System.out.println("----------");
//                System.out.println("----------");
//            }
//          System.out.println(executeResult);
//          System.out.println(statement.getUpdateCount()); Работает с обычным execute, показывает сколько строк было обновлено.

